"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PullRequestLabelManager = void 0;
const core = __importStar(require("@actions/core"));
const github = __importStar(require("@actions/github"));
class PullRequestLabelManager {
    constructor(token, dryRun = false) {
        this.dryRun = dryRun;
        this.client = github.getOctokit(token);
        this.repo = github.context.repo.repo;
        this.owner = github.context.repo.owner;
        if (github.context.payload.pull_request) {
            this.pullNumber = github.context.payload.pull_request.number;
        }
        else {
            core.setFailed('Error retrieving PR');
        }
        console.log(this.owner, this.repo, this.pullNumber);
    }
    async copyLabelsFromReferencedIssues() {
        console.log('calling copylabels with: ', this.pullNumber);
        if (!this.pullNumber) {
            return;
        }
        const pull = await this.client.rest.pulls.get({
            owner: this.owner,
            repo: this.repo,
            pull_number: this.pullNumber,
        });
        const references = this.findReferencedIssues(pull.data.body ?? '');
        const pullLabels = new Set(pull.data.labels.map((l) => l.name ?? ''));
        const issueLabels = new Set((await Promise.all(references.map((issue) => this.issueLabels(issue)))).flat());
        const newPullLabels = new Set(pullLabels);
        replaceLabels(newPullLabels, PRIO_LABELS, highestPrioLabel(issueLabels));
        replaceLabels(newPullLabels, CLASS_LABELS, classification(issueLabels));
        const diff = setDiff(pullLabels, newPullLabels);
        if (isEmptyDiff(diff)) {
            return;
        }
        const dryRun = this.dryRun ? '[--dry-run] ' : '';
        console.log(`${dryRun}${this.pullNumber} (references ${references}) ${vizDiff(diff)}`);
        if (!this.dryRun) {
            await Promise.all([
                diff.adds ? this.client.rest.issues.addLabels({
                    owner: this.owner,
                    repo: this.repo,
                    issue_number: this.pullNumber,
                    labels: diff.adds,
                }) : Promise.resolve(undefined),
                diff.removes ? this.client.rest.issues.removeAllLabels({
                    owner: this.owner,
                    repo: this.repo,
                    issue_number: this.pullNumber,
                    labels: diff.adds,
                }) : Promise.resolve(undefined),
            ]);
        }
    }
    findReferencedIssues(text) {
        const hashRegex = /#(\d+)/g;
        const urlRegex = new RegExp(`https://github.com/${this.owner}/${this.repo}/issues/(\d+)`, 'g');
        const issuesReffedByHash = Array.from(text.matchAll(hashRegex)).map((m) => m[1]);
        const issuesReffedByUrl = Array.from(text.matchAll(urlRegex)).map((m) => m[1]);
        return [...issuesReffedByHash, ...issuesReffedByUrl].map((x) => parseInt(x, 10));
    }
    async issueLabels(issue_number) {
        const issue = await this.client.rest.issues.get({
            owner: this.owner,
            repo: this.repo,
            issue_number,
        });
        return issue.data.labels.map((l) => typeof l === 'string' ? l : l.name ?? '');
    }
}
exports.PullRequestLabelManager = PullRequestLabelManager;
const PRIO_LABELS = ['p0', 'p1', 'p2'];
const CLASS_LABELS = ['bug', 'feature-request'];
function highestPrioLabel(labels) {
    return PRIO_LABELS.find(l => labels.has(l));
}
function classification(labels) {
    return CLASS_LABELS.find(l => labels.has(l));
}
function replaceLabels(labels, remove, replace) {
    if (replace !== undefined) {
        for (const r of remove) {
            labels.delete(r);
        }
        labels.add(replace);
    }
}
function setDiff(xs, ys) {
    const ret = { adds: [], removes: [] };
    for (const y of ys) {
        if (!xs.has(y)) {
            ret.adds.push(y);
        }
    }
    for (const x of xs) {
        if (!ys.has(x)) {
            ret.removes.push(x);
        }
    }
    return ret;
}
function isEmptyDiff(diff) {
    return diff.adds.length + diff.removes.length === 0;
}
function vizDiff(diff) {
    return `${JSON.stringify(diff.removes)} -> ${JSON.stringify(diff.adds)}`;
}
//# sourceMappingURL=data:application/json;base64,